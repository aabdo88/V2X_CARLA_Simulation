
Test vectors for Linkage Values lv(i,j)
for i = {0,1} and j randomly chosen in [1,20] for test purposes
===============================================================

LA1 ID (16 bits) =
0x8E09

LA2 ID (16 bits) =
0x59CE


i = 0
=====
j is randomly chosen in [1,20]

j (in range [1,20], padded to 32 bits) =
0x00000008

LA1
---
ls1(0) = AES key (128 bits) = randomly generated 128 bits for every device
0x4840ED221502D9AB6786BF68FBA9F210
 ls1_0[16] = 
{ 0x48, 0x40, 0xED, 0x22, 0x15, 0x02, 0xD9, 0xAB, 0x67, 0x86, 0xBF, 0x68, 0xFB, 0xA9, 0xF2, 0x10 }

AES input plaintext (128 bits) = la_id1 (16-bit) || j (32-bit) || 0 (80-bit) = 
0x8E090000000800000000000000000000
 aes_in1_j[16] = 
{ 0x8E, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_ls1(0) (la_id1 || j || 0^{80}) =
0xEFFA91B5D938E103EDE781FC119FC096
 aes_out1_0_j[16] = 
{ 0xEF, 0xFA, 0x91, 0xB5, 0xD9, 0x38, 0xE1, 0x03, 0xED, 0xE7, 0x81, 0xFC, 0x11, 0x9F, 0xC0, 0x96 }

plv1(0,j) = AES output XOR AES input (72 bits) = 
0x61F391B5D930E103ED
 plv1_0_j[9] = 
{ 0x61, 0xF3, 0x91, 0xB5, 0xD9, 0x30, 0xE1, 0x03, 0xED }

LA2
---
ls2(0) = AES key (128 bits) = randomly generated 128 bits for every device
0x6B71A7EB5755F16E89981D2189A6DAEA
 ls2_0[16] = 
{ 0x6B, 0x71, 0xA7, 0xEB, 0x57, 0x55, 0xF1, 0x6E, 0x89, 0x98, 0x1D, 0x21, 0x89, 0xA6, 0xDA, 0xEA }

AES input plaintext (128 bits) = la_id2 (16-bit) || j (32-bit) || 0 (80-bit) = 
0x59CE0000000800000000000000000000
 aes_in2_j[16] = 
{ 0x59, 0xCE, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_ls2(0) (la_id2 || j || 0^{80}) =
0x50B75EC53B66211CDF5A4F070E3BC867
 aes_out2_0_j[16] = 
{ 0x50, 0xB7, 0x5E, 0xC5, 0x3B, 0x66, 0x21, 0x1C, 0xDF, 0x5A, 0x4F, 0x07, 0x0E, 0x3B, 0xC8, 0x67 }

plv2(0,j) = AES output XOR AES input (72 bits) = 
0x09795EC53B6E211CDF
 plv2_0_j[9] = 
{ 0x09, 0x79, 0x5E, 0xC5, 0x3B, 0x6E, 0x21, 0x1C, 0xDF }

lv(0,j)
-------
lv(0,j) = plv1(0,j) XOR plv2(0,j)
0x688ACF70E25EC01F32
 lv_0_j[9] = 
{ 0x68, 0x8A, 0xCF, 0x70, 0xE2, 0x5E, 0xC0, 0x1F, 0x32 }


i = 1
=====
j is randomly chosen in [1,20]

j (in range [1,20], padded to 32 bits) =
0x00000006

LA1
---
SHA-256 input (256 bits) = la_id1 (16-bit) || ls1(0) (128-bit) || 0 (112-bit) = 
0x8E094840ED221502D9AB6786BF68FBA9F2100000000000000000000000000000
 sha256_in1_1[32] = 
{ 0x8E, 0x09, 0x48, 0x40, 0xED, 0x22, 0x15, 0x02, 0xD9, 0xAB, 0x67, 0x86, 0xBF, 0x68, 0xFB, 0xA9, 
  0xF2, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

SHA-256 output (256 bits) = SHA-256(la_id1 || ls1(0)) || 0^{112}) =
0xbd8f57949b4b60800cc97dbc6cd73edf4e9030c415080553a8859fe9d1fef740
 sha256_out1_1[32] = 
{ 0xBD, 0x8F, 0x57, 0x94, 0x9B, 0x4B, 0x60, 0x80, 0x0C, 0xC9, 0x7D, 0xBC, 0x6C, 0xD7, 0x3E, 0xDF, 
  0x4E, 0x90, 0x30, 0xC4, 0x15, 0x08, 0x05, 0x53, 0xA8, 0x85, 0x9F, 0xE9, 0xD1, 0xFE, 0xF7, 0x40 }

ls1(1) = AES key (128 bits) = first 128 bits of SHA-256(la_id1 || ls1(0)) =
0xbd8f57949b4b60800cc97dbc6cd73edf
 ls1_1[16] = 
{ 0xBD, 0x8F, 0x57, 0x94, 0x9B, 0x4B, 0x60, 0x80, 0x0C, 0xC9, 0x7D, 0xBC, 0x6C, 0xD7, 0x3E, 0xDF }

AES input plaintext (128 bits) = la_id1 (16-bit) || j (32-bit) || 0 (80-bit) = 
0x8E090000000600000000000000000000
 aes_in1_j[16] = 
{ 0x8E, 0x09, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_ls1(1) (la_id1 || j || 0^{80}) =
0xDC2144A7E47D958FA1BA756DA353239A
 aes_out1_1_j[16] = 
{ 0xDC, 0x21, 0x44, 0xA7, 0xE4, 0x7D, 0x95, 0x8F, 0xA1, 0xBA, 0x75, 0x6D, 0xA3, 0x53, 0x23, 0x9A }

plv1(1,j) = AES output XOR AES input (72 bits) = 
0x522844A7E47B958FA1
 plv1_1_j[9] = 
{ 0x52, 0x28, 0x44, 0xA7, 0xE4, 0x7B, 0x95, 0x8F, 0xA1 }

LA2
---
SHA-256 input (256 bits) = la_id2 (16-bit) || ls2(0) (128-bit) || 0 (112-bit) = 
0x59CE6B71A7EB5755F16E89981D2189A6DAEA0000000000000000000000000000
 sha256_in2_1[32] = 
{ 0x59, 0xCE, 0x6B, 0x71, 0xA7, 0xEB, 0x57, 0x55, 0xF1, 0x6E, 0x89, 0x98, 0x1D, 0x21, 0x89, 0xA6, 
  0xDA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

SHA-256 output (256 bits) = SHA-256(la_id2 || ls2(0)) || 0^{112}) =
0x228c371780f1e0ec424659bbaebc54a19d1393f465f1bc857fbb26fb48c49195
 sha256_out2_1[32] = 
{ 0x22, 0x8C, 0x37, 0x17, 0x80, 0xF1, 0xE0, 0xEC, 0x42, 0x46, 0x59, 0xBB, 0xAE, 0xBC, 0x54, 0xA1, 
  0x9D, 0x13, 0x93, 0xF4, 0x65, 0xF1, 0xBC, 0x85, 0x7F, 0xBB, 0x26, 0xFB, 0x48, 0xC4, 0x91, 0x95 }

ls2(1) = AES key (128 bits) = first 128 bits of SHA-256(la_id2 || ls2(0)) =
0x228c371780f1e0ec424659bbaebc54a1
 ls2_1[16] = 
{ 0x22, 0x8C, 0x37, 0x17, 0x80, 0xF1, 0xE0, 0xEC, 0x42, 0x46, 0x59, 0xBB, 0xAE, 0xBC, 0x54, 0xA1 }

AES input plaintext (128 bits) = la_id2 (16-bit) || j (32-bit) || 0 (80-bit) = 
0x59CE0000000600000000000000000000
 aes_in2_j[16] = 
{ 0x59, 0xCE, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_ls2(1) (la_id2 || j || 0^{80}) =
0x33A1DB7DEF6B8FDCF69B784757230F64
 aes_out2_1_j[16] = 
{ 0x33, 0xA1, 0xDB, 0x7D, 0xEF, 0x6B, 0x8F, 0xDC, 0xF6, 0x9B, 0x78, 0x47, 0x57, 0x23, 0x0F, 0x64 }

plv2(1,j) = AES output XOR AES input (72 bits) = 
0x6A6FDB7DEF6D8FDCF6
 plv2_1_j[9] = 
{ 0x6A, 0x6F, 0xDB, 0x7D, 0xEF, 0x6D, 0x8F, 0xDC, 0xF6 }

lv(1,j)
-------
lv(1,j) = plv1(1,j) XOR plv2(1,j)
0x38479FDA0B161A5357
 lv_1_j[9] = 
{ 0x38, 0x47, 0x9F, 0xDA, 0x0B, 0x16, 0x1A, 0x53, 0x57 }

