
Test vectors for Group Linkage Values glv(i,j)
for i = {0,1} and j randomly chosen 32-bit value for test purposes
==================================================================

Note: the argument k is not included in the notation of gplv1(i,j,k), gs1(i,k),
      gplv2(i,j,k), gs2(i,k) and glv(i,j,k) below
      as it is not included in their computation

LA1 ID (16 bits) =
0x8E09

LA2 ID (16 bits) =
0x59CE

k: group chain identifier (32 bits) =
0x5A6709EA

ik: indices key shared between LA1 and LA2 (128 bits) =
0x1502D9AB6786BF68FBA9F210373BF221

i = 0
=====
j is a randomly chosen 32-bit value

j (32 bits) =
0x4840ED22

LA1
---
gs1(0) = AES key (128 bits) = randomly generated 128 bits for every device
0x6B71A7EB5755F16E89981D2189A6DAEA
 gs1_0[16] = 
{ 0x6B, 0x71, 0xA7, 0xEB, 0x57, 0x55, 0xF1, 0x6E, 0x89, 0x98, 0x1D, 0x21, 0x89, 0xA6, 0xDA, 0xEA }

AES input plaintext (128 bits) = la_id1 (16-bit) || j (32-bit) || 0 (80-bit) = 
0x8E094840ED2200000000000000000000
 aes_in1_j[16] = 
{ 0x8E, 0x09, 0x48, 0x40, 0xED, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_gs1(0) (la_id1 || j || 0^{80}) =
0xB767579376159697E6140C52140896B0
 aes_out1_0_j[16] = 
{ 0xB7, 0x67, 0x57, 0x93, 0x76, 0x15, 0x96, 0x97, 0xE6, 0x14, 0x0C, 0x52, 0x14, 0x08, 0x96, 0xB0 }

gplv1(0,j) = AES output XOR AES input (72 bits) = 
0x396E1FD39B379697E6
 gplv1_0_j[9] = 
{ 0x39, 0x6E, 0x1F, 0xD3, 0x9B, 0x37, 0x96, 0x97, 0xE6 }

LA2
---
gs2(0) = AES key (128 bits) = randomly generated 128 bits for every device
0xCC4DB977F595AD233F0F4E65408D9A9C
 gs2_0[16] = 
{ 0xCC, 0x4D, 0xB9, 0x77, 0xF5, 0x95, 0xAD, 0x23, 0x3F, 0x0F, 0x4E, 0x65, 0x40, 0x8D, 0x9A, 0x9C }

AES input plaintext (128 bits) = la_id2 (16-bit) || j (32-bit) || 0 (80-bit) = 
0x59CE4840ED2200000000000000000000
 aes_in2_j[16] = 
{ 0x59, 0xCE, 0x48, 0x40, 0xED, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_gs2(0) (la_id2 || j || 0^{80}) =
0x0677AAFAE74FAA09EA47463FCB944FB2
 aes_out2_0_j[16] = 
{ 0x06, 0x77, 0xAA, 0xFA, 0xE7, 0x4F, 0xAA, 0x09, 0xEA, 0x47, 0x46, 0x3F, 0xCB, 0x94, 0x4F, 0xB2 }

gplv2(0,j) = AES output XOR AES input (72 bits) = 
0x5FB9E2BA0A6DAA09EA
 gplv2_0_j[9] = 
{ 0x5F, 0xB9, 0xE2, 0xBA, 0x0A, 0x6D, 0xAA, 0x09, 0xEA }

glv(0,j)
----------
glv(0,j) = gplv1(0,j) XOR gplv2(0,j)
0x66D7FD69915A3C9E0C
 glv_0_j[9] = 
{ 0x66, 0xD7, 0xFD, 0x69, 0x91, 0x5A, 0x3C, 0x9E, 0x0C }

ei(j,k)
-------
Encrypted indices function AES input = j (32-bit) || k (32-bit) || 0 (64-bit) =
0x5A6709EA4840ED220000000000000000
 aes_in_j_k[16] = 
{ 0x5A, 0x67, 0x09, 0xEA, 0x48, 0x40, 0xED, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_ik (j || k || 0^{64}) =
0x504260B3EB3677B1F43F825D0790719B
 aes_out_j_k[16] = 
{ 0x50, 0x42, 0x60, 0xB3, 0xEB, 0x36, 0x77, 0xB1, 0xF4, 0x3F, 0x82, 0x5D, 0x07, 0x90, 0x71, 0x9B }

ei(j,k): Encrypted indices function = AES output XOR AES input (128 bits) = 
0x0A256959A3769A93F43F825D0790719B
 ei_j_k[16] = 
{ 0x0A, 0x25, 0x69, 0x59, 0xA3, 0x76, 0x9A, 0x93, 0xF4, 0x3F, 0x82, 0x5D, 0x07, 0x90, 0x71, 0x9B }


i = 1
=====
j is a randomly chosen 32-bit value

j (32 bits) =
0x548F7017

LA1
---
SHA-256 input (256 bits) = la_id1 (16-bit) || gs1(0) (128-bit) || 0 (112-bit) = 
0x8E096B71A7EB5755F16E89981D2189A6DAEA0000000000000000000000000000
 sha256_in1_1[32] = 
{ 0x8E, 0x09, 0x6B, 0x71, 0xA7, 0xEB, 0x57, 0x55, 0xF1, 0x6E, 0x89, 0x98, 0x1D, 0x21, 0x89, 0xA6, 
  0xDA, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

SHA-256 output (256 bits) = SHA-256(la_id1 || gs1(0)) || 0^{112}) =
0x38722c4559b4c3e96d12032b0e056a76117a40cb7f378c3fdc5f7119bb3f64d1
 sha256_out1_1[32] = 
{ 0x38, 0x72, 0x2C, 0x45, 0x59, 0xB4, 0xC3, 0xE9, 0x6D, 0x12, 0x03, 0x2B, 0x0E, 0x05, 0x6A, 0x76, 
  0x11, 0x7A, 0x40, 0xCB, 0x7F, 0x37, 0x8C, 0x3F, 0xDC, 0x5F, 0x71, 0x19, 0xBB, 0x3F, 0x64, 0xD1 }

gs1(1) = AES key (128 bits) = first 128 bits of SHA-256(la_id1 || gs1(0)) =
0x38722c4559b4c3e96d12032b0e056a76
 gs1_1[16] = 
{ 0x38, 0x72, 0x2C, 0x45, 0x59, 0xB4, 0xC3, 0xE9, 0x6D, 0x12, 0x03, 0x2B, 0x0E, 0x05, 0x6A, 0x76 }

AES input plaintext (128 bits) = la_id1 (16-bit) || j (32-bit) || 0 (80-bit) = 
0x8E09548F701700000000000000000000
 aes_in1_j[16] = 
{ 0x8E, 0x09, 0x54, 0x8F, 0x70, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_gs1(1) (la_id1 || j || 0^{80}) =
0x26D20E03D0F3E2E486E08151DFE0C756
 aes_out1_1_j[16] = 
{ 0x26, 0xD2, 0x0E, 0x03, 0xD0, 0xF3, 0xE2, 0xE4, 0x86, 0xE0, 0x81, 0x51, 0xDF, 0xE0, 0xC7, 0x56 }

gplv1(1,j) = AES output XOR AES input (72 bits) = 
0xA8DB5A8CA0E4E2E486
 gplv1_1_j[9] = 
{ 0xA8, 0xDB, 0x5A, 0x8C, 0xA0, 0xE4, 0xE2, 0xE4, 0x86 }

LA2
---
SHA-256 input (256 bits) = la_id2 (16-bit) || gs2(0) (128-bit) || 0 (112-bit) = 
0x59CECC4DB977F595AD233F0F4E65408D9A9C0000000000000000000000000000
 sha256_in2_1[32] = 
{ 0x59, 0xCE, 0xCC, 0x4D, 0xB9, 0x77, 0xF5, 0x95, 0xAD, 0x23, 0x3F, 0x0F, 0x4E, 0x65, 0x40, 0x8D, 
  0x9A, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

SHA-256 output (256 bits) = SHA-256(la_id2 || gs2(0)) || 0^{112}) =
0xd0cbd39f60e0e5728ebf6bdfe997677c30929936d7d9df2e0c687d29d3d02610
 sha256_out2_1[32] = 
{ 0xD0, 0xCB, 0xD3, 0x9F, 0x60, 0xE0, 0xE5, 0x72, 0x8E, 0xBF, 0x6B, 0xDF, 0xE9, 0x97, 0x67, 0x7C, 
  0x30, 0x92, 0x99, 0x36, 0xD7, 0xD9, 0xDF, 0x2E, 0x0C, 0x68, 0x7D, 0x29, 0xD3, 0xD0, 0x26, 0x10 }

gs2(1) = AES key (128 bits) = first 128 bits of SHA-256(la_id2 || gs2(0)) =
0xd0cbd39f60e0e5728ebf6bdfe997677c
 gs2_1[16] = 
{ 0xD0, 0xCB, 0xD3, 0x9F, 0x60, 0xE0, 0xE5, 0x72, 0x8E, 0xBF, 0x6B, 0xDF, 0xE9, 0x97, 0x67, 0x7C }

AES input plaintext (128 bits) = la_id2 (16-bit) || j (32-bit) || 0 (80-bit) = 
0x59CE548F701700000000000000000000
 aes_in2_j[16] = 
{ 0x59, 0xCE, 0x54, 0x8F, 0x70, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_gs2(1) (la_id2 || j || 0^{80}) =
0x351021F8DA15F84BB1EBAD0026A26267
 aes_out2_1_j[16] = 
{ 0x35, 0x10, 0x21, 0xF8, 0xDA, 0x15, 0xF8, 0x4B, 0xB1, 0xEB, 0xAD, 0x00, 0x26, 0xA2, 0x62, 0x67 }

gplv2(1,j) = AES output XOR AES input (72 bits) = 
0x6CDE7577AA02F84BB1
 gplv2_1_j[9] = 
{ 0x6C, 0xDE, 0x75, 0x77, 0xAA, 0x02, 0xF8, 0x4B, 0xB1 }

glv(1,j)
-------
glv(1,j) = gplv1(1,j) XOR gplv2(1,j)
0xC4052FFB0AE61AAF37
 glv_1_j[9] = 
{ 0xC4, 0x05, 0x2F, 0xFB, 0x0A, 0xE6, 0x1A, 0xAF, 0x37 }

ei(j,k)
-------
Encrypted indices function AES input = j (32-bit) || k (32-bit) || 0 (64-bit) =
0x5A6709EA548F70170000000000000000
 aes_in_j_k[16] = 
{ 0x5A, 0x67, 0x09, 0xEA, 0x54, 0x8F, 0x70, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

AES output (128 bits) = AES_ik (j || k || 0^{64}) =
0x18F9E5A3B817A08C80B6ACD7E431CBB3
 aes_out_j_k[16] = 
{ 0x18, 0xF9, 0xE5, 0xA3, 0xB8, 0x17, 0xA0, 0x8C, 0x80, 0xB6, 0xAC, 0xD7, 0xE4, 0x31, 0xCB, 0xB3 }

ei(j,k): Encrypted indices function = AES output XOR AES input (128 bits) = 
0x429EEC49EC98D09B80B6ACD7E431CBB3
 ei_j_k[16] = 
{ 0x42, 0x9E, 0xEC, 0x49, 0xEC, 0x98, 0xD0, 0x9B, 0x80, 0xB6, 0xAC, 0xD7, 0xE4, 0x31, 0xCB, 0xB3 }

